{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"icon",
				"icon_codes"
			],
			[
				"condi",
				"condition_codes_csv"
			],
			[
				"cond",
				"condition_codes_csv"
			],
			[
				"time",
				"timedelta"
			],
			[
				"message",
				"messageType"
			],
			[
				"M",
				"MessageTypes"
			],
			[
				"MessageType",
				"MESSAGE_TYPE"
			],
			[
				"send",
				"sendAppMessage"
			],
			[
				"exp",
				"expected_length"
			],
			[
				"create",
				"createWeatherModel"
			],
			[
				"current_weather_set",
				"current_weather_set_valid_weather(CurrentWeatherLayer *current_weather_layer, CurrentWeather current_weather)	void"
			],
			[
				"current",
				"current_weather"
			],
			[
				"Curre",
				"CurrentWeather	Typedef"
			],
			[
				"curren",
				"current_weather_layer"
			],
			[
				"curr",
				"current_weather_layer	CurrentWeatherLayer *"
			],
			[
				"Curren",
				"CurrentWeatherLayer	Typedef"
			],
			[
				"curre",
				"current_details_layer	CurrentDetailsLayer *"
			],
			[
				"current_details_layer",
				"current_details_layer_get_layer(CurrentDetailsLayer *current_details_layer)	Layer *"
			],
			[
				"create_curre",
				"create_current_details_layer()	CurrentDetailsLayer *"
			],
			[
				"mock_",
				"mock_outdoor_state()	OutdoorState"
			],
			[
				"uin",
				"uint8	uint8_t"
			],
			[
				"wind",
				"wind_speed"
			],
			[
				"icon_",
				"icon_text_layer_get_layer(const IconTextLayer *icon_text_layer)	Layer *"
			],
			[
				"GO",
				"GTextOverflowMode	Typedef"
			],
			[
				"new",
				"new_text	char *"
			],
			[
				"text",
				"text_layer	TextLayer *"
			],
			[
				"layer_",
				"layer_destroy(Layer *layer)	void"
			],
			[
				"text_layer",
				"text_layer_set_text(TextLayer *text_layer, const char *text)	void"
			],
			[
				"copy",
				"copy_string(const char *source, size_t max)	char *"
			],
			[
				"TEX",
				"TEXT_SIZE_Y	const uint8_t"
			],
			[
				"text_",
				"text_layer_destroy(TextLayer *text_layer)	void"
			],
			[
				"bitmap",
				"bitmap_layer_destroy(BitmapLayer *bitmap_layer)	void"
			],
			[
				"layer",
				"layer_create(GRect frame)	Layer *"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pebble-quick-weather.sublime-project",
			"settings":
			{
				"buffer_size": 340,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/condition_codes.c",
			"settings":
			{
				"buffer_size": 704,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 159.0,
		"last_filter": "clang",
		"selected_items":
		[
			[
				"clang",
				"Package Control: List Unmanaged Packages"
			],
			[
				"clear",
				"Bookmarks: Clear All"
			],
			[
				"build",
				"Build: New Build System"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"packag",
				"Package Control: Remove Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 539.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/matt/development/projects/pebble-quick-weather",
		"/home/matt/development/projects/pebble-quick-weather/src"
	],
	"file_history":
	[
		"/home/matt/development/projects/pebble-quick-weather/src/condition_codes.c",
		"/home/matt/development/projects/pebble-quick-weather/code-generation/condition_codes.template.c",
		"/home/matt/development/projects/pebble-quick-weather/code-generation/condition_codes.c",
		"/home/matt/development/projects/pebble-quick-weather/src/condition_codes.h",
		"/home/matt/development/projects/pebble-quick-weather/src/copying_text_layer.c",
		"/home/matt/development/projects/pebble-quick-weather/pebble-quick-weather.sublime-project",
		"/home/matt/development/projects/pebble-quick-weather/wscript",
		"/home/matt/development/projects/pebble-quick-weather/generate_mapping_js.py",
		"/home/matt/development/projects/pebble-quick-weather/code-generation/generate_mapping_c.py",
		"/home/matt/development/projects/pebble-quick-weather/generate_mapping_c.py",
		"/home/matt/development/projects/pebble-quick-weather/code-generation/generate_mapping_js.py",
		"/home/matt/development/projects/pebble-quick-weather/.gitignore",
		"/home/matt/development/projects/pebble-quick-weather/src/app.js",
		"/home/matt/development/projects/google-picture-upload/client.json",
		"/home/matt/development/projects/pebble-quick-weather/design-files/condition_codes.txt",
		"/home/matt/development/projects/pebble-quick-weather/resources/condition_codes.txt",
		"/home/matt/development/projects/pebble-quick-weather/resources/condition_codes_original.txt",
		"/home/matt/development/projects/pebble-quick-weather/resources/condition_codes.csv",
		"/home/matt/development/projects/pebble-quick-weather/src/single_day_layer.h",
		"/home/matt/development/projects/pebble-quick-weather/src/main.c",
		"/home/matt/development/projects/pebble-quick-weather/appinfo.json",
		"/home/matt/development/projects/pebble-quick-weather/src/util.c",
		"/home/matt/development/projects/pebble-quick-weather/src/util.h",
		"/home/matt/development/projects/pebble-quick-weather/src/copying_text_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/main.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_details_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/wscript",
		"/home/matt/development/projects/PebbleWeatherFace/src/bitmap_container.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/icon_text_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_weather_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/resources/images/humidity_icon.png",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_details_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_weather_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/weather_request.js",
		"/home/matt/development/projects/PebbleWeatherFace/appinfo.json",
		"/home/matt/development/projects/PebbleWeatherFace/src/copying_text_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/weather_request.js",
		"/usr/include/time.h",
		"/usr/include/clang/3.5.2/include/stdbool.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/bluetooth_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/copying_text_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/pebble-weather-face.sublime-project",
		"/home/matt/development/projects/PebbleWeatherFace/src/battery.c",
		"/home/matt/.config/sublime-text-3/Packages/Clang-Complete/cc.sublime-settings",
		"/home/matt/development/projects/PebbleWeatherFace/src/bluetooth_layer.c",
		"/home/matt/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/matt/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/matt/development/projects/PebbleWeatherFace/src/icon_text_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/battery.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/forecast_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/util.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/util.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/drawing.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_weather_layer/icon_text_layer.c",
		"/home/matt/development/projects/PebbleWeatherFace/src/current_weather_layer/icon_text_layer.h",
		"/home/matt/development/projects/PebbleWeatherFace/src/bitmap_container.h",
		"/home/matt/development/libraries/PebbleSDK-3.4/Pebble/aplite/include/pebble.h"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pebble-quick-weather.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 340,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/condition_codes.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 704,
						"regions":
						{
						},
						"selection":
						[
							[
								579,
								579
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.cc":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "pebble-quick-weather.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ap",
				"src/app.js"
			],
			[
				"app",
				"src/app.js"
			],
			[
				"util",
				"src/util.h"
			],
			[
				"fore",
				"src/forecast_layer.c"
			],
			[
				"cu",
				"src/current_weather_layer.c"
			],
			[
				"curr",
				"src/current_weather_layer.c"
			],
			[
				"wea",
				"src/weather_request.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"vintage":
		{
		}
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
